# whats_app_cloud_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WhatsAppCloudApi
  # RequestVerificationCodeRequest Model.
  class RequestVerificationCodeRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Chosen method for verification.
    # @return [RequestVerificationCodeMethodEnum]
    attr_accessor :code_method

    # Your locale. For example: "en_US".
    # @return [String]
    attr_accessor :locale

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['code_method'] = 'code_method'
      @_hash['locale'] = 'locale'
      @_hash
    end

    # A mapping from model property names to types.
    def self.types
      @_types = {} if @_types.nil?
      @_types['code_method'] = 'RequestVerificationCodeMethodEnum'
      @_types['locale'] = 'String'
      @_types
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(code_method = nil,
                   locale = nil)
      @code_method = code_method unless code_method == SKIP
      @locale = locale unless locale == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      names.each do |key, value|
        has_default_value = false
        if !((hash.key? value) || (optionals.include? key)) && !has_default_value
          raise ArgumentError,
                "#{value} is not present in the provided hash"
        end
      end

      # Extract variables from the hash.
      code_method = hash.key?('code_method') ? hash['code_method'] : SKIP
      locale = hash.key?('locale') ? hash['locale'] : SKIP

      # Create object from extracted values.
      RequestVerificationCodeRequest.new(code_method,
                                         locale)
    end
  end
end
